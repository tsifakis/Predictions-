import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import random

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from math import sqrt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dropout, Dense, Input
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tensorflow.keras.regularizers import l1_l2
from tensorflow.keras.models import load_model

from colorama import Fore, Style

loaded_model = load_model("my_model_3.keras")

seed_value = 1
tf.random.set_seed(seed_value)
np.random.seed(seed_value)

temp0 = np.array([0.01, 0.09, 0.05, 0.07, 0.02, 0.03, 0.05, 0.04, 0.09, 0.04, 0.01, 0.09, 0.06, 0.1, 0.01, 0.01, 0.01, 0.09, 0.03, 0.02, 0.05, 0.07, 0.05, 0.06, 0.05, 0.01, 0.06, 0.04, 0.03, 0.11, 0.06, 0.09, 0.01, 0.01, 0.14, 0.07, 0.06, 0.1, 0.04, 0.07, 0.06, 0.01, 0.02, 0.01, 0.02, 0.1, 0.03, 0.03, 0.08, 0.04, 0.01, 0.02, 0.01, 0.03, 0.02, 0.03, 0.04, 0.01, 0.15, 0.05, 0.01, 0.01, 0.04, 0.04, 0.05, 0.03, 0.07, 0.01, 0.02, 0.02, 0.01, 0.04, 0.08, 0.05, 0.01, 0.02, 0.02, 0.02, 0.05, 0.06, 0.01, 0.02, 0.01, 0.04, 0.1, 0.02, 0.03, 0.08, 0.04, 0.01, 0.02, 0.01, 0.14, 0.05, 0.03, 0.02, 0.05, 0.06, 0.03, 0.04, 0.03, 0.06, 0.02, 0.03, 0.02, 0.01, 0.03, 0.03, 0.09, 0.02, 0.08, 0.01, 0.04, 0.07, 0.01, 0.01, 0.04, 0.06, 0.01, 0.07, 0.03, 0.04, 0.08, 0.01, 0.05, 0.04, 0.03, 0.01, 0.01, 0.01, 0.07, 0.01, 0.05, 0.02, 0.01, 0.05, 0.01, 0.05, 0.02, 0.02, 0.06, 0.01, 0.05, 0.02, 0.19, 0.02, 0.01, 0.01, 0.04, 0.05, 0.02, 0.01, 0.05, 0.06, 0.04, 0.03, 0.02, 0.03, 0.02, 0.02, 0.01, 0.08, 0.01, 0.01, 0.03, 0.01, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.04, 0.08, 0.08, 0.01, 0.02, 0.02, 0.05, 0.01, 0.01, 0.01, 0.02, 0.01, 0.04, 0.08, 0.04, 0.05, 0.05, 0.01, 0.02, 0.02])
temp1 = np.array([0.02, 0.1, 0.11, 0.09, 0.14, 0.15, 0.22, 0.06, 0.1, 0.09, 0.15, 0.15, 0.07, 0.13, 0.03, 0.07, 0.02, 0.11, 0.05, 0.06, 0.09, 0.11, 0.09, 0.07, 0.09, 0.02, 0.08, 0.07, 0.07, 0.13, 0.15, 0.1, 0.02, 0.09, 0.16, 0.08, 0.11, 0.11, 0.05, 0.08, 0.08, 0.06, 0.08, 0.05, 0.05, 0.13, 0.15, 0.09, 0.18, 0.05, 0.02, 0.04, 0.03, 0.1, 0.11, 0.05, 0.09, 0.04, 0.17, 0.07, 0.02, 0.05, 0.07, 0.13, 0.07, 0.06, 0.09, 0.02, 0.08, 0.13, 0.02, 0.05, 0.09, 0.06, 0.07, 0.06, 0.04, 0.03, 0.06, 0.08, 0.05, 0.04, 0.08, 0.08, 0.15, 0.08, 0.06, 0.11, 0.08, 0.03, 0.04, 0.05, 0.18, 0.06, 0.09, 0.04, 0.12, 0.1, 0.05, 0.08, 0.08, 0.16, 0.14, 0.07, 0.03, 0.04, 0.21, 0.06, 0.1, 0.07, 0.09, 0.05, 0.07, 0.08, 0.05, 0.03, 0.05, 0.17, 0.07, 0.09, 0.09, 0.11, 0.14, 0.05, 0.09, 0.05, 0.09, 0.04, 0.05, 0.03, 0.11, 0.19, 0.06, 0.03, 0.05, 0.1, 0.02, 0.07, 0.06, 0.11, 0.13, 0.04, 0.06, 0.03, 0.23, 0.05, 0.11, 0.02, 0.06, 0.07, 0.07, 0.06, 0.13, 0.09, 0.08, 0.04, 0.06, 0.05, 0.05, 0.12, 0.09, 0.09, 0.03, 0.08, 0.1, 0.04, 0.06, 0.04, 0.12, 0.03, 0.1, 0.06, 0.1, 0.1, 0.09, 0.02, 0.04, 0.09, 0.11, 0.04, 0.03, 0.14, 0.05, 0.03, 0.05, 0.12, 0.05, 0.06, 0.06, 0.02, 0.03, 0.09])
temp2 = np.array([0.06, 0.18, 0.12, 0.17, 0.19, 0.16, 0.26, 0.17, 0.11, 0.23, 0.16, 0.2, 0.18, 0.14, 0.06, 0.11, 0.1, 0.17, 0.06, 0.13, 0.1, 0.15, 0.1, 0.21, 0.13, 0.07, 0.13, 0.11, 0.08, 0.19, 0.16, 0.12, 0.04, 0.14, 0.19, 0.12, 0.13, 0.14, 0.08, 0.11, 0.17, 0.07, 0.11, 0.11, 0.12, 0.21, 0.16, 0.11, 0.19, 0.12, 0.06, 0.06, 0.04, 0.17, 0.18, 0.07, 0.12, 0.05, 0.18, 0.08, 0.06, 0.12, 0.1, 0.16, 0.1, 0.08, 0.1, 0.06, 0.1, 0.15, 0.05, 0.06, 0.11, 0.07, 0.15, 0.07, 0.1, 0.06, 0.14, 0.1, 0.1, 0.12, 0.21, 0.14, 0.16, 0.11, 0.09, 0.12, 0.09, 0.06, 0.14, 0.11, 0.19, 0.13, 0.11, 0.05, 0.18, 0.15, 0.09, 0.1, 0.09, 0.2, 0.18, 0.09, 0.05, 0.15, 0.22, 0.09, 0.18, 0.08, 0.11, 0.14, 0.08, 0.09, 0.07, 0.08, 0.1, 0.19, 0.09, 0.19, 0.11, 0.12, 0.16, 0.08, 0.13, 0.11, 0.13, 0.13, 0.06, 0.04, 0.15, 0.24, 0.16, 0.04, 0.06, 0.11, 0.03, 0.08, 0.09, 0.19, 0.15, 0.17, 0.12, 0.09, 0.25, 0.06, 0.14, 0.04, 0.08, 0.1, 0.08, 0.08, 0.16, 0.12, 0.1, 0.06, 0.17, 0.07, 0.21, 0.21, 0.13, 0.1, 0.04, 0.12, 0.11, 0.08, 0.08, 0.15, 0.18, 0.09, 0.16, 0.09, 0.12, 0.11, 0.16, 0.07, 0.14, 0.1, 0.14, 0.06, 0.08, 0.2, 0.18, 0.08, 0.06, 0.16, 0.06, 0.07, 0.1, 0.06, 0.04, 0.1])
temp3 = np.array([0.07, 0.19, 0.19, 0.2, 0.21, 0.18, 0.27, 0.24, 0.17, 0.25, 0.19, 0.21, 0.22, 0.27, 0.1, 0.15, 0.17, 0.19, 0.1, 0.17, 0.11, 0.16, 0.23, 0.22, 0.18, 0.09, 0.21, 0.12, 0.09, 0.24, 0.17, 0.18, 0.1, 0.16, 0.27, 0.14, 0.15, 0.16, 0.12, 0.12, 0.22, 0.1, 0.14, 0.12, 0.2, 0.22, 0.17, 0.12, 0.23, 0.17, 0.14, 0.08, 0.09, 0.19, 0.25, 0.15, 0.13, 0.09, 0.22, 0.11, 0.12, 0.13, 0.15, 0.25, 0.16, 0.17, 0.19, 0.07, 0.12, 0.18, 0.15, 0.07, 0.14, 0.15, 0.18, 0.1, 0.11, 0.07, 0.15, 0.16, 0.11, 0.15, 0.23, 0.18, 0.18, 0.14, 0.18, 0.22, 0.1, 0.09, 0.17, 0.15, 0.21, 0.3, 0.15, 0.06, 0.21, 0.17, 0.11, 0.12, 0.1, 0.21, 0.24, 0.11, 0.09, 0.19, 0.25, 0.14, 0.2, 0.1, 0.14, 0.15, 0.1, 0.11, 0.1, 0.12, 0.15, 0.21, 0.1, 0.23, 0.15, 0.15, 0.21, 0.11, 0.15, 0.15, 0.17, 0.14, 0.09, 0.05, 0.23, 0.3, 0.2, 0.07, 0.07, 0.17, 0.05, 0.13, 0.12, 0.23, 0.19, 0.21, 0.18, 0.16, 0.27, 0.08, 0.21, 0.08, 0.1, 0.12, 0.09, 0.23, 0.23, 0.13, 0.11, 0.08, 0.18, 0.08, 0.26, 0.31, 0.19, 0.13, 0.07, 0.16, 0.16, 0.1, 0.11, 0.17, 0.2, 0.17, 0.26, 0.1, 0.14, 0.13, 0.3, 0.11, 0.17, 0.15, 0.16, 0.13, 0.09, 0.21, 0.2, 0.09, 0.12, 0.19, 0.16, 0.17, 0.12, 0.07, 0.09, 0.12])
temp4 = np.array([0.08, 0.31, 0.2, 0.22, 0.23, 0.21, 0.28, 0.26, 0.23, 0.28, 0.26, 0.22, 0.23, 0.28, 0.2, 0.18, 0.2, 0.2, 0.12, 0.22, 0.13, 0.17, 0.27, 0.23, 0.27, 0.1, 0.24, 0.13, 0.17, 0.29, 0.19, 0.21, 0.11, 0.19, 0.31, 0.15, 0.16, 0.18, 0.13, 0.14, 0.25, 0.12, 0.16, 0.22, 0.24, 0.26, 0.18, 0.31, 0.26, 0.2, 0.17, 0.13, 0.11, 0.23, 0.3, 0.22, 0.17, 0.14, 0.25, 0.17, 0.13, 0.14, 0.17, 0.31, 0.19, 0.18, 0.23, 0.08, 0.14, 0.2, 0.16, 0.1, 0.24, 0.17, 0.2, 0.17, 0.14, 0.11, 0.16, 0.2, 0.13, 0.21, 0.24, 0.24, 0.19, 0.15, 0.25, 0.25, 0.12, 0.19, 0.22, 0.16, 0.25, 0.33, 0.16, 0.1, 0.22, 0.25, 0.12, 0.19, 0.17, 0.22, 0.25, 0.15, 0.1, 0.24, 0.28, 0.17, 0.27, 0.12, 0.15, 0.17, 0.17, 0.14, 0.12, 0.15, 0.18, 0.27, 0.26, 0.25, 0.19, 0.2, 0.29, 0.13, 0.23, 0.16, 0.18, 0.17, 0.18, 0.21, 0.24, 0.31, 0.22, 0.1, 0.08, 0.23, 0.06, 0.18, 0.14, 0.25, 0.2, 0.24, 0.19, 0.21, 0.3, 0.19, 0.3, 0.12, 0.16, 0.13, 0.15, 0.24, 0.32, 0.14, 0.13, 0.1, 0.24, 0.13, 0.27, 0.34, 0.21, 0.16, 0.08, 0.18, 0.24, 0.24, 0.13, 0.21, 0.24, 0.18, 0.27, 0.11, 0.17, 0.16, 0.35, 0.3, 0.18, 0.18, 0.19, 0.14, 0.12, 0.3, 0.21, 0.11, 0.15, 0.2, 0.19, 0.19, 0.22, 0.1, 0.13, 0.13])
temp5 = np.array([0.12, 0.32, 0.29, 0.25, 0.24, 0.26, 0.31, 0.27, 0.24, 0.29, 0.28, 0.28, 0.27, 0.3, 0.25, 0.2, 0.21, 0.22, 0.14, 0.27, 0.15, 0.23, 0.31, 0.31, 0.28, 0.13, 0.26, 0.14, 0.24, 0.31, 0.21, 0.22, 0.16, 0.2, 0.35, 0.21, 0.19, 0.2, 0.17, 0.15, 0.26, 0.33, 0.17, 0.3, 0.26, 0.34, 0.26, 0.39, 0.27, 0.26, 0.19, 0.15, 0.12, 0.26, 0.38, 0.33, 0.23, 0.16, 0.26, 0.21, 0.18, 0.17, 0.2, 0.4, 0.24, 0.19, 0.24, 0.1, 0.15, 0.25, 0.27, 0.15, 0.25, 0.21, 0.26, 0.18, 0.18, 0.13, 0.17, 0.26, 0.14, 0.32, 0.32, 0.25, 0.23, 0.2, 0.27, 0.28, 0.14, 0.28, 0.24, 0.18, 0.35, 0.35, 0.21, 0.15, 0.23, 0.27, 0.13, 0.27, 0.2, 0.26, 0.33, 0.17, 0.13, 0.35, 0.29, 0.22, 0.31, 0.2, 0.21, 0.22, 0.22, 0.22, 0.26, 0.23, 0.2, 0.28, 0.32, 0.27, 0.23, 0.22, 0.32, 0.14, 0.24, 0.18, 0.2, 0.2, 0.2, 0.22, 0.29, 0.36, 0.25, 0.16, 0.1, 0.24, 0.07, 0.19, 0.16, 0.29, 0.29, 0.27, 0.22, 0.22, 0.31, 0.24, 0.32, 0.13, 0.2, 0.16, 0.16, 0.27, 0.34, 0.15, 0.14, 0.12, 0.26, 0.17, 0.32, 0.35, 0.22, 0.2, 0.17, 0.19, 0.28, 0.26, 0.15, 0.22, 0.3, 0.22, 0.28, 0.14, 0.18, 0.18, 0.36, 0.31, 0.19, 0.2, 0.21, 0.21, 0.19, 0.31, 0.26, 0.2, 0.18, 0.22, 0.2, 0.24, 0.29, 0.12, 0.14, 0.19])
temp6 = np.array([0.16, 0.37, 0.3, 0.29, 0.29, 0.28, 0.36, 0.29, 0.29, 0.36, 0.3, 0.3, 0.33, 0.32, 0.28, 0.21, 0.23, 0.32, 0.2, 0.28, 0.2, 0.24, 0.32, 0.32, 0.37, 0.17, 0.28, 0.19, 0.31, 0.37, 0.28, 0.3, 0.18, 0.23, 0.41, 0.24, 0.23, 0.26, 0.24, 0.17, 0.27, 0.34, 0.18, 0.31, 0.29, 0.46, 0.31, 0.41, 0.29, 0.29, 0.22, 0.2, 0.14, 0.28, 0.39, 0.41, 0.3, 0.21, 0.28, 0.23, 0.21, 0.29, 0.22, 0.43, 0.31, 0.3, 0.25, 0.12, 0.17, 0.26, 0.32, 0.16, 0.29, 0.22, 0.29, 0.19, 0.2, 0.14, 0.18, 0.27, 0.17, 0.38, 0.33, 0.33, 0.24, 0.25, 0.29, 0.41, 0.16, 0.3, 0.25, 0.22, 0.36, 0.39, 0.22, 0.16, 0.3, 0.32, 0.16, 0.28, 0.24, 0.3, 0.34, 0.25, 0.15, 0.36, 0.32, 0.23, 0.32, 0.21, 0.24, 0.25, 0.27, 0.35, 0.29, 0.28, 0.23, 0.29, 0.33, 0.28, 0.24, 0.26, 0.34, 0.15, 0.29, 0.24, 0.22, 0.31, 0.22, 0.24, 0.33, 0.46, 0.31, 0.26, 0.16, 0.26, 0.12, 0.22, 0.17, 0.33, 0.3, 0.3, 0.32, 0.24, 0.34, 0.26, 0.33, 0.22, 0.25, 0.18, 0.18, 0.29, 0.35, 0.19, 0.15, 0.14, 0.35, 0.18, 0.33, 0.4, 0.28, 0.22, 0.23, 0.21, 0.29, 0.3, 0.16, 0.29, 0.38, 0.26, 0.3, 0.17, 0.23, 0.2, 0.37, 0.33, 0.2, 0.28, 0.37, 0.24, 0.22, 0.32, 0.32, 0.25, 0.19, 0.23, 0.27, 0.27, 0.32, 0.19, 0.17, 0.24])
temp7 = np.array([0.2, 0.38, 0.32, 0.34, 0.3, 0.29, 0.38, 0.32, 0.3, 0.4, 0.33, 0.34, 0.36, 0.34, 0.29, 0.22, 0.31, 0.37, 0.24, 0.32, 0.33, 0.26, 0.35, 0.36, 0.38, 0.19, 0.29, 0.2, 0.32, 0.42, 0.35, 0.31, 0.19, 0.26, 0.5, 0.25, 0.29, 0.29, 0.28, 0.21, 0.29, 0.39, 0.33, 0.36, 0.32, 0.48, 0.38, 0.42, 0.33, 0.36, 0.26, 0.27, 0.18, 0.29, 0.4, 0.45, 0.31, 0.23, 0.35, 0.3, 0.23, 0.35, 0.26, 0.47, 0.34, 0.31, 0.32, 0.14, 0.19, 0.29, 0.34, 0.17, 0.31, 0.29, 0.34, 0.23, 0.28, 0.2, 0.23, 0.31, 0.26, 0.41, 0.37, 0.4, 0.26, 0.35, 0.33, 0.42, 0.27, 0.34, 0.27, 0.26, 0.37, 0.47, 0.26, 0.25, 0.33, 0.39, 0.2, 0.32, 0.25, 0.33, 0.38, 0.28, 0.21, 0.4, 0.4, 0.25, 0.38, 0.3, 0.26, 0.28, 0.35, 0.36, 0.34, 0.32, 0.26, 0.31, 0.34, 0.31, 0.26, 0.27, 0.36, 0.19, 0.31, 0.29, 0.24, 0.38, 0.26, 0.27, 0.35, 0.48, 0.32, 0.35, 0.17, 0.3, 0.17, 0.26, 0.27, 0.36, 0.38, 0.33, 0.33, 0.35, 0.36, 0.28, 0.36, 0.26, 0.3, 0.23, 0.19, 0.36, 0.39, 0.26, 0.18, 0.16, 0.38, 0.2, 0.34, 0.49, 0.36, 0.23, 0.25, 0.22, 0.35, 0.39, 0.22, 0.34, 0.39, 0.3, 0.35, 0.24, 0.34, 0.35, 0.38, 0.35, 0.25, 0.34, 0.39, 0.26, 0.34, 0.33, 0.33, 0.29, 0.21, 0.24, 0.3, 0.3, 0.33, 0.28, 0.28, 0.26])
temp8 = np.array([0.22, 0.46, 0.36, 0.35, 0.31, 0.38, 0.39, 0.4, 0.33, 0.44, 0.34, 0.38, 0.4, 0.37, 0.32, 0.29, 0.32, 0.38, 0.26, 0.33, 0.39, 0.37, 0.37, 0.4, 0.39, 0.21, 0.3, 0.24, 0.35, 0.46, 0.36, 0.35, 0.25, 0.29, 0.52, 0.27, 0.33, 0.3, 0.3, 0.26, 0.3, 0.41, 0.37, 0.37, 0.43, 0.5, 0.4, 0.43, 0.35, 0.41, 0.43, 0.32, 0.19, 0.31, 0.42, 0.47, 0.36, 0.32, 0.37, 0.34, 0.3, 0.36, 0.28, 0.49, 0.41, 0.32, 0.36, 0.15, 0.24, 0.33, 0.36, 0.21, 0.32, 0.32, 0.39, 0.28, 0.35, 0.21, 0.26, 0.33, 0.33, 0.45, 0.39, 0.45, 0.3, 0.39, 0.36, 0.44, 0.28, 0.42, 0.3, 0.32, 0.43, 0.51, 0.33, 0.3, 0.38, 0.42, 0.21, 0.35, 0.26, 0.44, 0.4, 0.31, 0.4, 0.41, 0.44, 0.29, 0.41, 0.37, 0.28, 0.32, 0.38, 0.38, 0.35, 0.34, 0.29, 0.33, 0.42, 0.32, 0.27, 0.28, 0.41, 0.2, 0.33, 0.38, 0.27, 0.41, 0.36, 0.39, 0.36, 0.49, 0.35, 0.39, 0.22, 0.34, 0.26, 0.3, 0.29, 0.38, 0.39, 0.34, 0.36, 0.37, 0.46, 0.29, 0.43, 0.29, 0.31, 0.28, 0.22, 0.37, 0.4, 0.3, 0.22, 0.19, 0.47, 0.24, 0.37, 0.53, 0.41, 0.24, 0.31, 0.29, 0.42, 0.41, 0.23, 0.48, 0.4, 0.4, 0.4, 0.29, 0.35, 0.39, 0.4, 0.37, 0.27, 0.37, 0.41, 0.29, 0.41, 0.36, 0.35, 0.31, 0.22, 0.26, 0.33, 0.33, 0.39, 0.33, 0.34, 0.27])
temp9 = np.array([0.3, 0.51, 0.37, 0.39, 0.34, 0.39, 0.41, 0.46, 0.38, 0.48, 0.39, 0.41, 0.41, 0.38, 0.36, 0.35, 0.34, 0.39, 0.32, 0.34, 0.45, 0.4, 0.38, 0.41, 0.4, 0.24, 0.35, 0.32, 0.37, 0.48, 0.41, 0.36, 0.27, 0.34, 0.54, 0.29, 0.34, 0.35, 0.34, 0.29, 0.37, 0.48, 0.45, 0.38, 0.47, 0.52, 0.41, 0.47, 0.36, 0.43, 0.44, 0.33, 0.2, 0.41, 0.43, 0.53, 0.39, 0.33, 0.4, 0.38, 0.38, 0.39, 0.32, 0.5, 0.42, 0.35, 0.38, 0.3, 0.25, 0.34, 0.38, 0.26, 0.35, 0.33, 0.43, 0.36, 0.4, 0.25, 0.28, 0.36, 0.39, 0.46, 0.45, 0.52, 0.32, 0.45, 0.37, 0.45, 0.31, 0.44, 0.31, 0.36, 0.44, 0.54, 0.35, 0.34, 0.42, 0.43, 0.22, 0.36, 0.34, 0.45, 0.42, 0.33, 0.43, 0.48, 0.47, 0.3, 0.43, 0.4, 0.35, 0.33, 0.47, 0.41, 0.36, 0.42, 0.31, 0.36, 0.43, 0.33, 0.3, 0.29, 0.42, 0.28, 0.34, 0.43, 0.28, 0.42, 0.38, 0.41, 0.5, 0.52, 0.4, 0.43, 0.25, 0.35, 0.27, 0.34, 0.31, 0.39, 0.45, 0.36, 0.38, 0.39, 0.49, 0.3, 0.46, 0.31, 0.35, 0.4, 0.23, 0.38, 0.46, 0.33, 0.31, 0.2, 0.51, 0.26, 0.39, 0.56, 0.42, 0.34, 0.32, 0.35, 0.45, 0.45, 0.3, 0.49, 0.42, 0.45, 0.42, 0.3, 0.45, 0.42, 0.41, 0.41, 0.28, 0.39, 0.44, 0.31, 0.42, 0.39, 0.37, 0.33, 0.24, 0.29, 0.34, 0.37, 0.41, 0.35, 0.43, 0.3])
temp10 = np.array([0.34, 0.52, 0.44, 0.4, 0.36, 0.42, 0.47, 0.51, 0.44, 0.5, 0.43, 0.43, 0.42, 0.39, 0.38, 0.41, 0.37, 0.47, 0.33, 0.38, 0.47, 0.42, 0.39, 0.43, 0.41, 0.32, 0.42, 0.33, 0.39, 0.49, 0.43, 0.48, 0.36, 0.4, 0.55, 0.43, 0.37, 0.36, 0.35, 0.41, 0.42, 0.52, 0.46, 0.4, 0.5, 0.53, 0.43, 0.48, 0.39, 0.48, 0.45, 0.36, 0.24, 0.45, 0.46, 0.55, 0.42, 0.38, 0.42, 0.45, 0.4, 0.41, 0.34, 0.51, 0.43, 0.37, 0.39, 0.32, 0.28, 0.4, 0.44, 0.29, 0.36, 0.35, 0.52, 0.42, 0.43, 0.27, 0.29, 0.42, 0.4, 0.51, 0.48, 0.53, 0.48, 0.5, 0.48, 0.46, 0.38, 0.45, 0.4, 0.39, 0.47, 0.56, 0.59, 0.36, 0.44, 0.45, 0.26, 0.41, 0.36, 0.47, 0.54, 0.34, 0.48, 0.51, 0.51, 0.33, 0.45, 0.44, 0.39, 0.41, 0.51, 0.47, 0.38, 0.46, 0.33, 0.38, 0.44, 0.38, 0.32, 0.31, 0.48, 0.34, 0.35, 0.48, 0.4, 0.5, 0.4, 0.43, 0.54, 0.58, 0.43, 0.45, 0.27, 0.42, 0.31, 0.36, 0.34, 0.41, 0.47, 0.37, 0.39, 0.41, 0.51, 0.33, 0.5, 0.38, 0.42, 0.41, 0.31, 0.45, 0.48, 0.34, 0.35, 0.25, 0.53, 0.32, 0.4, 0.62, 0.43, 0.41, 0.35, 0.42, 0.49, 0.46, 0.34, 0.56, 0.56, 0.47, 0.47, 0.32, 0.5, 0.45, 0.42, 0.44, 0.32, 0.41, 0.46, 0.33, 0.46, 0.52, 0.4, 0.35, 0.32, 0.3, 0.36, 0.39, 0.44, 0.36, 0.45, 0.33])
temp11 = np.array([0.4, 0.53, 0.45, 0.45, 0.44, 0.43, 0.48, 0.56, 0.48, 0.53, 0.47, 0.6, 0.45, 0.49, 0.43, 0.44, 0.46, 0.49, 0.38, 0.4, 0.49, 0.44, 0.41, 0.44, 0.42, 0.35, 0.43, 0.39, 0.41, 0.5, 0.44, 0.51, 0.43, 0.42, 0.65, 0.51, 0.39, 0.37, 0.41, 0.43, 0.44, 0.55, 0.5, 0.41, 0.54, 0.61, 0.44, 0.51, 0.4, 0.49, 0.47, 0.37, 0.25, 0.56, 0.47, 0.56, 0.44, 0.41, 0.44, 0.5, 0.41, 0.43, 0.38, 0.53, 0.55, 0.38, 0.41, 0.37, 0.34, 0.44, 0.47, 0.33, 0.4, 0.36, 0.54, 0.43, 0.44, 0.34, 0.3, 0.51, 0.43, 0.54, 0.5, 0.54, 0.53, 0.54, 0.5, 0.57, 0.41, 0.5, 0.41, 0.44, 0.48, 0.61, 0.6, 0.39, 0.46, 0.5, 0.36, 0.42, 0.37, 0.49, 0.55, 0.37, 0.49, 0.57, 0.57, 0.34, 0.49, 0.45, 0.46, 0.44, 0.63, 0.5, 0.47, 0.51, 0.39, 0.41, 0.45, 0.4, 0.34, 0.45, 0.53, 0.44, 0.45, 0.5, 0.42, 0.51, 0.45, 0.44, 0.55, 0.61, 0.45, 0.46, 0.35, 0.44, 0.37, 0.42, 0.4, 0.45, 0.54, 0.42, 0.41, 0.5, 0.53, 0.34, 0.54, 0.4, 0.45, 0.45, 0.37, 0.52, 0.49, 0.39, 0.37, 0.27, 0.59, 0.4, 0.41, 0.63, 0.47, 0.44, 0.36, 0.44, 0.5, 0.49, 0.35, 0.59, 0.61, 0.5, 0.49, 0.34, 0.58, 0.46, 0.53, 0.52, 0.37, 0.48, 0.48, 0.35, 0.52, 0.53, 0.42, 0.36, 0.37, 0.37, 0.37, 0.44, 0.46, 0.39, 0.46, 0.34])
temp12 = np.array([0.44, 0.59, 0.48, 0.51, 0.46, 0.47, 0.55, 0.64, 0.49, 0.55, 0.52, 0.62, 0.48, 0.51, 0.45, 0.5, 0.54, 0.55, 0.45, 0.41, 0.51, 0.48, 0.48, 0.49, 0.46, 0.46, 0.48, 0.42, 0.42, 0.51, 0.48, 0.54, 0.45, 0.43, 0.66, 0.52, 0.41, 0.45, 0.45, 0.46, 0.51, 0.57, 0.57, 0.45, 0.55, 0.63, 0.46, 0.59, 0.53, 0.52, 0.48, 0.41, 0.26, 0.59, 0.49, 0.62, 0.56, 0.47, 0.45, 0.52, 0.44, 0.5, 0.45, 0.54, 0.57, 0.4, 0.42, 0.42, 0.36, 0.5, 0.5, 0.39, 0.41, 0.39, 0.55, 0.49, 0.45, 0.39, 0.32, 0.57, 0.49, 0.55, 0.51, 0.57, 0.58, 0.58, 0.52, 0.6, 0.42, 0.52, 0.45, 0.57, 0.59, 0.64, 0.61, 0.4, 0.53, 0.59, 0.5, 0.57, 0.5, 0.5, 0.58, 0.39, 0.54, 0.58, 0.6, 0.35, 0.52, 0.51, 0.52, 0.5, 0.65, 0.56, 0.5, 0.58, 0.49, 0.54, 0.46, 0.41, 0.39, 0.49, 0.54, 0.46, 0.47, 0.55, 0.46, 0.52, 0.47, 0.47, 0.56, 0.65, 0.52, 0.53, 0.36, 0.47, 0.38, 0.46, 0.41, 0.52, 0.64, 0.43, 0.47, 0.55, 0.55, 0.38, 0.64, 0.42, 0.46, 0.56, 0.39, 0.57, 0.5, 0.45, 0.5, 0.3, 0.61, 0.44, 0.56, 0.69, 0.48, 0.46, 0.43, 0.51, 0.54, 0.51, 0.46, 0.61, 0.64, 0.51, 0.53, 0.35, 0.61, 0.48, 0.56, 0.54, 0.44, 0.5, 0.55, 0.36, 0.54, 0.58, 0.45, 0.42, 0.43, 0.38, 0.39, 0.45, 0.52, 0.57, 0.47, 0.41])
temp13 = np.array([0.47, 0.62, 0.5, 0.52, 0.51, 0.51, 0.56, 0.68, 0.57, 0.56, 0.53, 0.69, 0.52, 0.52, 0.46, 0.57, 0.56, 0.56, 0.48, 0.5, 0.56, 0.6, 0.49, 0.53, 0.48, 0.5, 0.65, 0.44, 0.45, 0.53, 0.51, 0.58, 0.48, 0.47, 0.69, 0.53, 0.44, 0.46, 0.47, 0.51, 0.53, 0.61, 0.59, 0.46, 0.56, 0.65, 0.48, 0.6, 0.58, 0.53, 0.5, 0.46, 0.36, 0.62, 0.5, 0.65, 0.61, 0.51, 0.54, 0.54, 0.53, 0.52, 0.47, 0.57, 0.6, 0.46, 0.52, 0.43, 0.41, 0.53, 0.54, 0.6, 0.42, 0.4, 0.66, 0.5, 0.49, 0.43, 0.35, 0.62, 0.55, 0.56, 0.55, 0.63, 0.59, 0.61, 0.54, 0.63, 0.43, 0.55, 0.59, 0.58, 0.6, 0.66, 0.62, 0.41, 0.54, 0.62, 0.52, 0.61, 0.58, 0.55, 0.59, 0.46, 0.56, 0.62, 0.63, 0.36, 0.57, 0.54, 0.55, 0.51, 0.66, 0.58, 0.51, 0.59, 0.61, 0.58, 0.47, 0.45, 0.5, 0.52, 0.57, 0.5, 0.48, 0.6, 0.52, 0.55, 0.48, 0.54, 0.58, 0.66, 0.55, 0.54, 0.37, 0.48, 0.43, 0.6, 0.44, 0.69, 0.66, 0.61, 0.49, 0.58, 0.59, 0.46, 0.65, 0.48, 0.47, 0.57, 0.48, 0.66, 0.56, 0.5, 0.54, 0.37, 0.64, 0.45, 0.58, 0.71, 0.52, 0.49, 0.5, 0.53, 0.59, 0.53, 0.51, 0.68, 0.67, 0.52, 0.54, 0.42, 0.62, 0.49, 0.59, 0.56, 0.46, 0.51, 0.56, 0.41, 0.55, 0.59, 0.51, 0.43, 0.45, 0.45, 0.4, 0.46, 0.55, 0.58, 0.51, 0.45])
temp14 = np.array([0.48, 0.64, 0.51, 0.53, 0.56, 0.53, 0.57, 0.69, 0.6, 0.59, 0.57, 0.7, 0.59, 0.55, 0.49, 0.58, 0.6, 0.61, 0.49, 0.54, 0.58, 0.61, 0.5, 0.56, 0.51, 0.54, 0.67, 0.45, 0.57, 0.6, 0.53, 0.62, 0.5, 0.5, 0.7, 0.62, 0.58, 0.51, 0.49, 0.54, 0.63, 0.63, 0.61, 0.47, 0.61, 0.67, 0.55, 0.61, 0.61, 0.58, 0.51, 0.53, 0.41, 0.63, 0.51, 0.66, 0.65, 0.55, 0.6, 0.55, 0.54, 0.54, 0.49, 0.65, 0.61, 0.49, 0.55, 0.52, 0.55, 0.59, 0.55, 0.65, 0.53, 0.41, 0.67, 0.52, 0.5, 0.45, 0.45, 0.66, 0.58, 0.6, 0.6, 0.64, 0.63, 0.65, 0.58, 0.65, 0.44, 0.63, 0.68, 0.62, 0.61, 0.7, 0.63, 0.42, 0.57, 0.65, 0.58, 0.62, 0.6, 0.6, 0.63, 0.47, 0.6, 0.64, 0.65, 0.43, 0.59, 0.56, 0.56, 0.53, 0.72, 0.61, 0.63, 0.62, 0.62, 0.59, 0.55, 0.53, 0.51, 0.53, 0.6, 0.51, 0.52, 0.64, 0.53, 0.56, 0.54, 0.66, 0.59, 0.67, 0.58, 0.6, 0.39, 0.55, 0.5, 0.61, 0.65, 0.71, 0.68, 0.62, 0.54, 0.62, 0.6, 0.54, 0.69, 0.5, 0.49, 0.58, 0.54, 0.67, 0.61, 0.56, 0.6, 0.44, 0.65, 0.58, 0.6, 0.72, 0.53, 0.56, 0.55, 0.63, 0.62, 0.56, 0.53, 0.7, 0.68, 0.55, 0.58, 0.53, 0.65, 0.57, 0.6, 0.6, 0.49, 0.66, 0.6, 0.48, 0.58, 0.61, 0.53, 0.49, 0.48, 0.46, 0.41, 0.47, 0.64, 0.6, 0.53, 0.48])
temp15 = np.array([0.54, 0.65, 0.63, 0.62, 0.59, 0.54, 0.59, 0.71, 0.62, 0.64, 0.6, 0.71, 0.61, 0.56, 0.5, 0.63, 0.62, 0.69, 0.53, 0.59, 0.6, 0.62, 0.51, 0.58, 0.53, 0.57, 0.68, 0.55, 0.65, 0.69, 0.61, 0.69, 0.52, 0.51, 0.72, 0.68, 0.62, 0.56, 0.57, 0.57, 0.67, 0.69, 0.62, 0.48, 0.62, 0.69, 0.57, 0.63, 0.67, 0.61, 0.59, 0.58, 0.43, 0.65, 0.55, 0.68, 0.66, 0.56, 0.63, 0.58, 0.57, 0.58, 0.5, 0.66, 0.69, 0.5, 0.64, 0.53, 0.6, 0.68, 0.57, 0.69, 0.54, 0.43, 0.69, 0.66, 0.52, 0.46, 0.46, 0.67, 0.6, 0.64, 0.66, 0.69, 0.66, 0.66, 0.61, 0.66, 0.46, 0.67, 0.69, 0.66, 0.62, 0.71, 0.64, 0.48, 0.58, 0.66, 0.63, 0.66, 0.62, 0.64, 0.64, 0.58, 0.62, 0.69, 0.67, 0.46, 0.61, 0.63, 0.57, 0.6, 0.75, 0.63, 0.64, 0.71, 0.63, 0.62, 0.58, 0.59, 0.56, 0.57, 0.63, 0.52, 0.56, 0.65, 0.55, 0.61, 0.56, 0.68, 0.66, 0.69, 0.72, 0.61, 0.49, 0.57, 0.52, 0.62, 0.66, 0.72, 0.7, 0.64, 0.59, 0.63, 0.63, 0.63, 0.71, 0.6, 0.6, 0.59, 0.6, 0.69, 0.62, 0.58, 0.63, 0.45, 0.69, 0.59, 0.61, 0.73, 0.54, 0.7, 0.64, 0.69, 0.71, 0.65, 0.6, 0.71, 0.69, 0.56, 0.59, 0.54, 0.66, 0.6, 0.63, 0.61, 0.52, 0.69, 0.61, 0.59, 0.6, 0.63, 0.56, 0.56, 0.5, 0.58, 0.57, 0.49, 0.68, 0.61, 0.57, 0.51])
temp16 = np.array([0.59, 0.66, 0.68, 0.66, 0.61, 0.58, 0.6, 0.73, 0.63, 0.68, 0.66, 0.72, 0.7, 0.57, 0.51, 0.7, 0.69, 0.7, 0.54, 0.66, 0.63, 0.67, 0.52, 0.63, 0.57, 0.66, 0.71, 0.57, 0.67, 0.73, 0.72, 0.75, 0.59, 0.58, 0.74, 0.72, 0.67, 0.58, 0.58, 0.6, 0.68, 0.71, 0.63, 0.5, 0.66, 0.7, 0.59, 0.64, 0.7, 0.68, 0.6, 0.72, 0.51, 0.72, 0.58, 0.69, 0.71, 0.58, 0.68, 0.67, 0.64, 0.6, 0.55, 0.72, 0.72, 0.54, 0.67, 0.67, 0.61, 0.74, 0.62, 0.7, 0.59, 0.44, 0.7, 0.67, 0.56, 0.48, 0.49, 0.71, 0.63, 0.67, 0.67, 0.7, 0.72, 0.67, 0.64, 0.72, 0.57, 0.74, 0.7, 0.69, 0.63, 0.72, 0.69, 0.62, 0.71, 0.72, 0.67, 0.69, 0.67, 0.68, 0.65, 0.6, 0.71, 0.7, 0.68, 0.57, 0.63, 0.64, 0.61, 0.67, 0.76, 0.7, 0.7, 0.72, 0.65, 0.69, 0.61, 0.63, 0.57, 0.59, 0.68, 0.56, 0.62, 0.67, 0.71, 0.66, 0.61, 0.7, 0.69, 0.7, 0.73, 0.62, 0.58, 0.59, 0.56, 0.71, 0.7, 0.74, 0.71, 0.65, 0.61, 0.64, 0.73, 0.67, 0.74, 0.66, 0.67, 0.61, 0.66, 0.73, 0.64, 0.62, 0.71, 0.61, 0.74, 0.65, 0.62, 0.75, 0.57, 0.71, 0.67, 0.71, 0.73, 0.66, 0.62, 0.73, 0.7, 0.63, 0.6, 0.55, 0.67, 0.62, 0.73, 0.66, 0.59, 0.71, 0.64, 0.67, 0.63, 0.68, 0.57, 0.61, 0.57, 0.69, 0.62, 0.52, 0.69, 0.66, 0.6, 0.55])
temp17 = np.array([0.61, 0.71, 0.7, 0.68, 0.73, 0.72, 0.66, 0.74, 0.64, 0.7, 0.69, 0.75, 0.74, 0.62, 0.52, 0.71, 0.72, 0.75, 0.59, 0.68, 0.64, 0.74, 0.58, 0.64, 0.7, 0.69, 0.74, 0.65, 0.75, 0.74, 0.75, 0.76, 0.71, 0.66, 0.75, 0.75, 0.73, 0.64, 0.59, 0.62, 0.73, 0.74, 0.68, 0.56, 0.67, 0.71, 0.62, 0.65, 0.75, 0.74, 0.68, 0.73, 0.57, 0.77, 0.6, 0.73, 0.74, 0.66, 0.71, 0.7, 0.67, 0.61, 0.58, 0.75, 0.73, 0.62, 0.71, 0.71, 0.72, 0.76, 0.68, 0.73, 0.61, 0.51, 0.74, 0.69, 0.74, 0.65, 0.52, 0.72, 0.7, 0.73, 0.68, 0.72, 0.76, 0.68, 0.66, 0.78, 0.64, 0.75, 0.73, 0.75, 0.69, 0.73, 0.7, 0.67, 0.75, 0.73, 0.69, 0.72, 0.69, 0.69, 0.75, 0.61, 0.73, 0.73, 0.69, 0.65, 0.66, 0.67, 0.65, 0.72, 0.77, 0.71, 0.73, 0.75, 0.7, 0.71, 0.69, 0.64, 0.65, 0.69, 0.7, 0.67, 0.7, 0.68, 0.72, 0.67, 0.66, 0.73, 0.73, 0.73, 0.76, 0.63, 0.73, 0.69, 0.57, 0.76, 0.76, 0.75, 0.73, 0.66, 0.67, 0.7, 0.75, 0.72, 0.76, 0.69, 0.7, 0.64, 0.71, 0.76, 0.67, 0.65, 0.72, 0.65, 0.75, 0.69, 0.69, 0.76, 0.59, 0.72, 0.69, 0.72, 0.76, 0.71, 0.65, 0.78, 0.71, 0.71, 0.61, 0.72, 0.72, 0.64, 0.75, 0.75, 0.63, 0.72, 0.69, 0.72, 0.64, 0.73, 0.71, 0.64, 0.6, 0.77, 0.65, 0.54, 0.74, 0.7, 0.63, 0.59])
temp18 = np.array([0.69, 0.72, 0.72, 0.71, 0.77, 0.74, 0.7, 0.76, 0.65, 0.75, 0.76, 0.79, 0.76, 0.67, 0.6, 0.75, 0.75, 0.79, 0.68, 0.69, 0.69, 0.75, 0.68, 0.71, 0.72, 0.77, 0.75, 0.72, 0.76, 0.75, 0.76, 0.79, 0.73, 0.68, 0.77, 0.76, 0.76, 0.71, 0.6, 0.64, 0.77, 0.75, 0.76, 0.61, 0.72, 0.77, 0.64, 0.67, 0.78, 0.75, 0.77, 0.74, 0.68, 0.78, 0.7, 0.74, 0.78, 0.72, 0.74, 0.74, 0.69, 0.72, 0.72, 0.78, 0.77, 0.69, 0.78, 0.72, 0.76, 0.77, 0.77, 0.74, 0.65, 0.7, 0.76, 0.71, 0.77, 0.72, 0.71, 0.73, 0.72, 0.75, 0.69, 0.74, 0.77, 0.7, 0.67, 0.79, 0.71, 0.76, 0.74, 0.77, 0.77, 0.78, 0.76, 0.72, 0.78, 0.78, 0.71, 0.74, 0.78, 0.7, 0.77, 0.65, 0.75, 0.79, 0.72, 0.69, 0.78, 0.69, 0.69, 0.73, 0.79, 0.77, 0.74, 0.77, 0.71, 0.75, 0.77, 0.68, 0.67, 0.75, 0.71, 0.75, 0.74, 0.71, 0.76, 0.77, 0.75, 0.75, 0.78, 0.78, 0.79, 0.65, 0.74, 0.78, 0.68, 0.77, 0.77, 0.77, 0.76, 0.74, 0.69, 0.72, 0.76, 0.74, 0.78, 0.71, 0.74, 0.71, 0.73, 0.78, 0.68, 0.67, 0.74, 0.71, 0.76, 0.7, 0.75, 0.77, 0.72, 0.73, 0.72, 0.75, 0.77, 0.77, 0.72, 0.79, 0.72, 0.75, 0.63, 0.78, 0.74, 0.66, 0.76, 0.77, 0.72, 0.77, 0.76, 0.76, 0.74, 0.78, 0.73, 0.68, 0.63, 0.78, 0.66, 0.59, 0.75, 0.72, 0.64, 0.72])
temp19 = np.array([0.76, 0.76, 0.79, 0.8, 0.79, 0.78, 0.78, 0.79, 0.71, 0.79, 0.8, 0.8, 0.8, 0.77, 0.66, 0.78, 0.77, 0.8, 0.8, 0.78, 0.75, 0.8, 0.73, 0.75, 0.76, 0.78, 0.78, 0.73, 0.8, 0.78, 0.78, 0.8, 0.79, 0.77, 0.79, 0.79, 0.8, 0.76, 0.68, 0.74, 0.78, 0.79, 0.77, 0.65, 0.78, 0.8, 0.77, 0.74, 0.8, 0.8, 0.8, 0.79, 0.71, 0.8, 0.76, 0.8, 0.8, 0.74, 0.78, 0.78, 0.76, 0.74, 0.76, 0.79, 0.8, 0.71, 0.8, 0.78, 0.78, 0.79, 0.79, 0.79, 0.78, 0.78, 0.8, 0.72, 0.78, 0.75, 0.76, 0.75, 0.73, 0.78, 0.79, 0.77, 0.78, 0.72, 0.71, 0.8, 0.72, 0.8, 0.79, 0.79, 0.79, 0.79, 0.78, 0.76, 0.79, 0.8, 0.74, 0.76, 0.79, 0.79, 0.8, 0.77, 0.78, 0.8, 0.8, 0.72, 0.79, 0.75, 0.76, 0.8, 0.8, 0.8, 0.76, 0.8, 0.72, 0.79, 0.79, 0.77, 0.71, 0.76, 0.79, 0.76, 0.79, 0.72, 0.79, 0.8, 0.76, 0.77, 0.79, 0.79, 0.8, 0.75, 0.76, 0.8, 0.74, 0.8, 0.8, 0.8, 0.79, 0.75, 0.72, 0.76, 0.78, 0.8, 0.8, 0.73, 0.79, 0.74, 0.8, 0.8, 0.69, 0.68, 0.76, 0.8, 0.8, 0.79, 0.8, 0.8, 0.79, 0.75, 0.79, 0.78, 0.78, 0.8, 0.8, 0.8, 0.73, 0.78, 0.71, 0.79, 0.8, 0.77, 0.8, 0.78, 0.73, 0.78, 0.8, 0.78, 0.8, 0.8, 0.77, 0.74, 0.71, 0.79, 0.71, 0.66, 0.76, 0.77, 0.79, 0.79])


temps = ([temp0, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12, temp13, temp14,
          temp15, temp16, temp17, temp18, temp19])

sequence_length = 1

def calculate_forward_differences(data):
    forward_diffs = np.diff(data, append=data[-1])
    return forward_diffs

def calculate_backward_differences(data):
    backward_diffs = np.diff(data, prepend=data[0])
    return backward_diffs

forward_diffs = [calculate_forward_differences(temp) for temp in temps]
backward_diffs = [calculate_backward_differences(temp) for temp in temps]

new_dataset = []
for temp, fwd_diff, bwd_diff in zip(temps, forward_diffs, backward_diffs):
    combined = np.stack((temp, fwd_diff, bwd_diff), axis=-1)
    new_dataset.append(combined)

def create_dataset(temps, forward_diffs, backward_diffs):
    print(create_dataset)
    X, y = [], []
    for temp, fwd_diff, bwd_diff in zip(temps, forward_diffs, backward_diffs):
        for i in range(len(temp) - sequence_length):
            X.append([temp[i], fwd_diff[i], bwd_diff[i]])
            y.append(temp[i + sequence_length])
    return np.array(X), np.array(y)

X, y = create_dataset(temps, forward_diffs, backward_diffs)
X = X.reshape((X.shape[0], sequence_length, X.shape[1]))

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=1)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.4, random_state=1)

model = Sequential([
    LSTM(units=80, activation='tanh', recurrent_activation='sigmoid', return_sequences=True, recurrent_dropout=0.1,
         bias_constraint=None, unit_forget_bias=True, bias_initializer='zeros', kernel_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         bias_regularizer=None, kernel_initializer='glorot_uniform', recurrent_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         recurrent_initializer='orthogonal', unroll=False, go_backwards=False, stateful=False, implementation=2,
         input_shape=(X_train.shape[1], X_train.shape[2]),),
    Dropout(0.1),
    LSTM(units=40, activation='tanh', recurrent_activation='sigmoid', return_sequences=True, recurrent_dropout=0.1,
         bias_constraint=None, unit_forget_bias=True, bias_initializer='zeros', kernel_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         bias_regularizer=None, kernel_initializer='glorot_uniform', recurrent_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         recurrent_initializer='orthogonal', unroll=False, go_backwards=False, stateful=False, implementation=2),
    Dropout(0.1),
    LSTM(units=20, activation='tanh', recurrent_activation='sigmoid', return_sequences=False, recurrent_dropout=0.1,
         bias_constraint=None, unit_forget_bias=True, bias_initializer='zeros', kernel_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         bias_regularizer=None, kernel_initializer='glorot_uniform', recurrent_regularizer=l1_l2(l1=1e-5, l2=1e-4),
         recurrent_initializer='orthogonal', unroll=False, go_backwards=False, stateful=False, implementation=2),
    Dropout(0.1),

    Dense(units=1, activation='relu', activity_regularizer=None, use_bias=True, bias_initializer='zeros',
          bias_constraint=None, bias_regularizer=None, kernel_initializer='glorot_uniform',
          kernel_regularizer=l1_l2(l1=1e-5, l2=1e-4), kernel_constraint=None)
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss=tf.keras.losses.MeanSquaredError(),
              metrics=[tf.keras.metrics.MeanSquaredError()])
model.summary()

early_stopping = EarlyStopping(monitor='loss', patience=50)
reduce_lr = ReduceLROnPlateau(monitor='loss', factor=0.1, patience=10)

history = model.fit(X_train, y_train, epochs=50, batch_size=2, validation_split=0.2,
                    callbacks=[early_stopping, reduce_lr], verbose=2)

predictions = model.predict(X_test)
test_loss = model.evaluate(X_test, y_test)
mse = mean_squared_error(y_test, predictions)
mae = mean_absolute_error(y_test, predictions)
rmse = sqrt(mean_squared_error(y_test, predictions))
r2 = r2_score(y_test, predictions)

future_temps = [data[-1, :] for data in new_dataset]
future_temps = np.array(future_temps).reshape(-1, 1, 3)

future_predictions = model.predict(future_temps).flatten() * 100
future_predictions = [int(pred) for pred in future_predictions]

predictions_all = ', '.join([str(pred) for pred in future_predictions])
sorted_predictions = sorted(future_predictions)
predictions_all_sorted = ', '.join([str(pred) for pred in sorted_predictions])

random_predictions6 = random.sample(future_predictions, 6)
random_predictions5 = random.sample(future_predictions, 5)
random_predictions4 = random.sample(future_predictions, 4)
random_predictions3 = random.sample(future_predictions, 3)
random_predictions2 = random.sample(future_predictions, 2)
random_predictions1 = random.sample(future_predictions, 1)

print(f"\n{Fore.GREEN}  R^2 Score    (R2_score)     :{Fore.LIGHTMAGENTA_EX} {r2}{Style.RESET_ALL}")
print(f"{Fore.GREEN}Mean    Squared    Error (MSE):{Fore.LIGHTMAGENTA_EX} {mse}{Style.RESET_ALL}")
print(f"{Fore.GREEN}Mean Absolute     Error  (MAE):{Fore.LIGHTMAGENTA_EX} {mae}{Style.RESET_ALL}")
print(f"{Fore.GREEN}Root Mean Squared Error (RMSE):{Fore.LIGHTMAGENTA_EX} {rmse}{Style.RESET_ALL}")
print(f'{Fore.GREEN}Test  Loss  ( X_test, y_test ):{Fore.LIGHTMAGENTA_EX} {test_loss}{Style.RESET_ALL}')

print(f"\n{Fore.YELLOW}ΟΙ ΕΠΟΜΕΝΕΣ ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.BLUE}{predictions_all}{Style.RESET_ALL}")
print(f"\n{Fore.YELLOW}ΟΙ ΕΠΟΜΕΝΕΣ ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.BLUE}{predictions_all_sorted}{Style.RESET_ALL}")


print(f"\n{Fore.LIGHTCYAN_EX}ΕΞΙ    ΤΥΧΑΙΕΣ    ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.YELLOW}{', '.join(map(str, random_predictions6))}{Style.RESET_ALL}")
print(f"{Fore.LIGHTCYAN_EX}ΠΕΝΤΕ   ΤΥΧΑΙΕΣ   ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.YELLOW}{', '.join(map(str, random_predictions5))}{Style.RESET_ALL}")
print(f"{Fore.LIGHTCYAN_EX}ΤΕΣΕΡΡΗΣ ΤΥΧΑΙΕΣ  ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.YELLOW}{', '.join(map(str, random_predictions4))}{Style.RESET_ALL}")
print(f"{Fore.LIGHTCYAN_EX}ΤΡΕΙΣ   ΤΥΧΑΙΕΣ   ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.YELLOW}{', '.join(map(str, random_predictions3))}{Style.RESET_ALL}")
print(f"{Fore.LIGHTCYAN_EX}ΔΥΟ    ΤΥΧΑΙΕΣ    ΘΕΡΜΟΚΡΑΣΙΕΣ: {Fore.YELLOW}{', '.join(map(str, random_predictions2))}{Style.RESET_ALL}")
print(f"{Fore.LIGHTCYAN_EX}ΜΙΑ    ΤΥΧΑΙΑ      ΘΕΡΜΟΚΡΑΣΙΑ: {Fore.YELLOW}{', '.join(map(str, random_predictions1))}{Style.RESET_ALL}")

plt.figure(figsize=(12, 8))
plt.plot(y_test, label='Actual')
plt.plot(predictions, label='Predicted')
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()

set_labels = ['Training Set', 'Validation Set', 'Test Set']
datasets = [y_train, y_val, y_test]

plt.figure(figsize=(10, 6))
for i, data in enumerate(datasets):
    plt.hist(data, bins=30, alpha=0.5, label=set_labels[i])

plt.title('Distribution of Temperature Data in Train/Validation/Test Sets')
plt.xlabel('Temperature')
plt.ylabel('Frequency')
plt.legend()
plt.grid(True)
plt.show()

model.save("my_model_3.keras")
